// <auto-generated />
using System;
using Demo.Files.FilesManagement.Domain.Adapters.Context.EntityFramework.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Demo.Files.FilesManagement.Domain.Adapters.Context.EntityFramework.Postgres.Migrations
{
    [DbContext(typeof(PostgresFilesManagementDbContext))]
    [Migration("20220110114143_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Demo.Files.FilesManagement.Domain.Adapters.Context.EntityFramework.StorageAggregate.DirectoryData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("StorageId")
                        .HasColumnType("bigint")
                        .HasColumnName("storageId");

                    b.HasKey("Id");

                    b.HasIndex("StorageId");

                    b.ToTable("Directories");
                });

            modelBuilder.Entity("Demo.Files.FilesManagement.Domain.Adapters.Context.EntityFramework.StorageAggregate.FileData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DirectoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("directoryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("PhysicalId")
                        .HasColumnType("uuid")
                        .HasColumnName("physicalId");

                    b.Property<decimal>("Size")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("size");

                    b.HasKey("Id");

                    b.HasIndex("DirectoryId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Demo.Files.FilesManagement.Domain.Adapters.Context.EntityFramework.StorageAggregate.StorageData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("LimitationsSingleFileSize")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("limitations_singleFileSize");

                    b.Property<long>("LimitationsTotalFileCount")
                        .HasColumnType("bigint")
                        .HasColumnName("limitations_totalFileCount");

                    b.Property<decimal>("LimitationsTotalSpace")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("limitations_totalSpace");

                    b.Property<decimal>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("Version");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("Demo.Files.FilesManagement.Domain.Adapters.Context.EntityFramework.StorageAggregate.DirectoryData", b =>
                {
                    b.HasOne("Demo.Files.FilesManagement.Domain.Adapters.Context.EntityFramework.StorageAggregate.StorageData", null)
                        .WithMany("Directories")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Demo.Files.FilesManagement.Domain.Adapters.Context.EntityFramework.StorageAggregate.FileData", b =>
                {
                    b.HasOne("Demo.Files.FilesManagement.Domain.Adapters.Context.EntityFramework.StorageAggregate.DirectoryData", null)
                        .WithMany("Files")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Demo.Files.FilesManagement.Domain.Adapters.Context.EntityFramework.StorageAggregate.DirectoryData", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Demo.Files.FilesManagement.Domain.Adapters.Context.EntityFramework.StorageAggregate.StorageData", b =>
                {
                    b.Navigation("Directories");
                });
#pragma warning restore 612, 618
        }
    }
}
