//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Demo.Files.FilesManagement.Presentations.WebApi {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class WebApiResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal WebApiResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Demo.Files.FilesManagement.Presentations.WebApi.WebApiResources", typeof(WebApiResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more internal server errors occurred..
        /// </summary>
        internal static string Error_InternalServerErrorTitle {
            get {
                return ResourceManager.GetString("Error_InternalServerErrorTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A directory cannot have an empty name..
        /// </summary>
        internal static string StorageError_DirectoryEmptyName {
            get {
                return ResourceManager.GetString("StorageError_DirectoryEmptyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A directory with that name already exists..
        /// </summary>
        internal static string StorageError_DirectoryNameConflict {
            get {
                return ResourceManager.GetString("StorageError_DirectoryNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory name is too long..
        /// </summary>
        internal static string StorageError_DirectoryNameTooLarge {
            get {
                return ResourceManager.GetString("StorageError_DirectoryNameTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory name contains invalid characters..
        /// </summary>
        internal static string StorageError_DirectoryNameWithUnsupportedCharacters {
            get {
                return ResourceManager.GetString("StorageError_DirectoryNameWithUnsupportedCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory does not exist..
        /// </summary>
        internal static string StorageError_DirectoryNotExists {
            get {
                return ResourceManager.GetString("StorageError_DirectoryNotExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The limits were exceeded..
        /// </summary>
        internal static string StorageError_ExceededLimitations {
            get {
                return ResourceManager.GetString("StorageError_ExceededLimitations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A file cannot have an empty name..
        /// </summary>
        internal static string StorageError_FileEmptyName {
            get {
                return ResourceManager.GetString("StorageError_FileEmptyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not possible to move the file to the specified directory..
        /// </summary>
        internal static string StorageError_FileIllegalMove {
            get {
                return ResourceManager.GetString("StorageError_FileIllegalMove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A file with that name already exists..
        /// </summary>
        internal static string StorageError_FileNameConflict {
            get {
                return ResourceManager.GetString("StorageError_FileNameConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file name is too long..
        /// </summary>
        internal static string StorageError_FileNameTooLarge {
            get {
                return ResourceManager.GetString("StorageError_FileNameTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file name contains invalid characters..
        /// </summary>
        internal static string StorageError_FileNameWithUnsupportedCharacters {
            get {
                return ResourceManager.GetString("StorageError_FileNameWithUnsupportedCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file does not exist..
        /// </summary>
        internal static string StorageError_FileNotExists {
            get {
                return ResourceManager.GetString("StorageError_FileNotExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Storage data is corrupted..
        /// </summary>
        internal static string StorageError_InvalidHistory {
            get {
                return ResourceManager.GetString("StorageError_InvalidHistory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The limit on the number of files is too weak..
        /// </summary>
        internal static string StorageError_LimitationsTotalFileCountTooLarge {
            get {
                return ResourceManager.GetString("StorageError_LimitationsTotalFileCountTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The limit on the size of a single file is too weak..
        /// </summary>
        internal static string StorageError_LimitationsTotalSingleFileSizeTooLarge {
            get {
                return ResourceManager.GetString("StorageError_LimitationsTotalSingleFileSizeTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The limit on available space is too weak..
        /// </summary>
        internal static string StorageError_LimitationsTotalSpaceTooLarge {
            get {
                return ResourceManager.GetString("StorageError_LimitationsTotalSpaceTooLarge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no such storage..
        /// </summary>
        internal static string StorageError_NotExists {
            get {
                return ResourceManager.GetString("StorageError_NotExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The storage has already been changed..
        /// </summary>
        internal static string StorageError_Outdated {
            get {
                return ResourceManager.GetString("StorageError_Outdated", resourceCulture);
            }
        }
    }
}
